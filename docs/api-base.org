# -*- coding: utf-8-unix -*-
#+STARTUP: showall indent

* Base library

** Generic Data Type

*** Array(T) - an array of objects

- Array(T)       :: Array of objects of ~T~ type.

*** List(T) - a linked-list of objects or NULL

- List(T)        :: Linked-list of objects of ~T~ type or ~NULL~.

*** Maybe(T) - wraps an object or nothing

- Maybe(T)       :: Wraps an object of ~T~ type or nothing.

*** Result(T, E) - wraps an ok value or an error value.

- Result(T, E)   :: Wraps an ok value of ~T~ type or an error value of ~E~ type.

*** Tuple(T1, ...) - a tuple of values of various types.

- Tuple(T1, ...) :: A tuple of values of various types.

** Trait

*** Eq(T) - trait to test equality of two values

#+begin_src c
  /* Eq(String) is a trait type to test equality of two String values */
  Eq(String) E = trait(Eq(String));
  if (E.eq("foo", "foo")) { printf("foo == foo\n"); }
  if (E.neq("foo", "foo")) { printf("foo != foo\n");}
  // -> foo == foo
#+end_src

- Eq(T)           ::
     Type of a trait that provides a set of functions to test equality of two
     values of ~T~ type.

- trait(Eq(T))    ::
     Constructs a new trait of ~Eq(T)~ type.\\
     For example, ~trait(Eq(int))~ creates an object of ~Eq(int)~ type.

An ~Eq(T)~ trait provides the following member functions :
- bool eq(T a, T b) :: Returns ~true~ if a \equal b
- bool neq(T a, T b) :: Returns ~true~ if a \neq b

*** Ord(T) - trait to compare two values

#+begin_src c
  String s = "foo";
  Ord(String) O = trait(Ord(String));
  if (O.le("foo", "bar")) {
    printf("foo <= bar\n")
  }
  if (O.lt("foo", "bar")) {
    printf("foo < bar\n")
  }
  if (O.ge("foo", "bar")) {
    printf("foo >= bar\n")
  }
  if (O.gt("foo", "bar")) {
    printf("foo > bar\n")
  }
  printf("%d\n", O.compare("foo", "bar"));
#+end_src

- Ord(T)          ::
     Type of a trait that provides a set of functions to compare two values of
     type ~T~

- trait(Ord(T))   :: 
     Constructs a new trait of ~Ord(T)~ type.\\
     For example, ~trait(Ord(int))~ creates an object of ~Ord(int)~ type.

An ~Ord(T)~ trait provides the following member functions :
- bool le(T a, T b) :: Returns ~true~ if a \le b
- bool lt(T a, T b) :: Returns ~true~ if a \lt b
- bool ge(T a, T b) :: Returns ~true~ if a \ge b
- bool gt(T a, T b) :: Returns ~true~ if a \gt b
- int compare(T a, T b) :: Returns
  - -1 if a \lt b,
  - 0 if a \equal b, or
  - 1 if a \gt b

*** MemT(T) - trait to allocate/deallocate memory

#+begin_src c
  MemT(int) m = trait(Mem(int));
  int* p = m.create(5);           /* allocate int[5] */
  m.free(p);                      /* free memoty */
#+end_src

- MemT(T)         ::
     Type of a trait that provides a set of functions to malloc/free memory of
     type ~T~

- trait(Mem(T))   :: 
     Constructs a new trait of ~MemT(T)~ type.\\
     For example, ~trait(Mem(int))~ creates an object of ~MemT(int)~ type.

An ~MemT(T)~ trait provides the following member functions :
- T* create(size_t n) ::
     Allocates ~T[n]~ and returns the address of head of the allocated memory.\\
     i.e. returns ~malloc(sizeof(T) * n)~.
- T* recreate(T* ptr, size_t n) ::
     Re-allocates ~T[n]~ and returns the new address of head of the allocated
     memory.\\
     i.e. returns ~realloc(ptr, sizeof(T) * n)~.
- void free(T* ptr)   ::
     Deallocates (free) the allocated memory.\\
     i.e. ~free(ptr)~.

*** ArrayT(T) - trait for Array(T) container.

#+begin_src c
  /* ArrayT(int) is a trait type to construct, destruct, and manipulate Array(T) */
  ArrayT(int) m = trait(Array(int));
  Array(int) a = m.create(5);
  size_t n = m.length(a); /* -> n = 5 */
  for (int* it = m.begin(a); it != m.end(a); *it++ = n--)
    ;
  for (int* it = m.begin(a); it != m.end(a); it++) {
    printf("%d ", *it); /* -> 5 4 3 2 1 */
  }
  m.free(a);
#+end_src

- ArrayT(T)       ::
     Type of a trait that provides a set of functions to construct, destruct,
     and manipulate ~Array(T)~.

- trait(Array(T))   :: 
     Constructs a new trait of ~ArrayT(T)~ type.\\
     For example, ~trait(Array(int))~ creates an object of ~ArrayT(int)~ type.

An ~ArrayT(T)~ trait provides the following member functions :
- Array(T) create(size_t n) ::
     Constructs an array of length ~n~.
- void free(Array(T) a) ::
     Destructs the array ~a~.\\
     i.e. ~free(a.data)~.
- T* begin(Array(T) a) ::
     Returns the address of the 1st element of the array ~a~.\\
     i.e. returns ~a.data~.
- T* end(Array(T) a) ::
     Returns the out of bounds address over the last element of the array ~a~.\\
     i.e. returns ~a.data + a.length~.
- size_t length(Array(T) a) ::
     Returns the length of the array ~a~.\\
     i.e. returns ~a.length~.
- bool empty(Array(T) a) ::
     Returns ~true~ if length of the array ~a~ was 0, ~false~ otherwise.\\
     i.e. returns ~!a.length~

*** ListT(T) - trait for List(T) container.

#+begin_src c
  ListT(int) m = trait(List(int));
  List(int) xs = m.cons(1, m.cons(2, m.cons(3, m.nil())));
  for (List(int) ys = xs; !m.null(ys); ys = m.tail(ys)) {
    printf("%d ", m.head(ys));    /* -> 1 2 3 */
  }
  m.free(xs);
#+end_src

- ListT(T)       ::
     Type of a trait that provides a set of functions to construct, destruct,
     and manipulate ~List(T)~.

- trait(List(T))   :: 
     Constructs a new trait of ~ListT(T)~ type.\\
     For example, ~trait(List(int))~ creates an object of ~ListT(int)~ type.

An ~ListT(T)~ trait provides the following member functions :
- List(T) cons(T x, List(T) xs) ::
     Constructs a linked-list (cons-cell).
- List(T) nil(void) ::
     Constructs an empty list.
- void free(List(T) xs) ::
     Destructs all cells of the list ~xs~.
- List(T) drop(size_t n, List(T) xs) ::
     Destructs leading at most ~n~ cells of the list ~xs~, and returns
     remaining list.
- T head(List(T) xs) ::
     Returns the head value of the list ~xs~.\\
     i.e. returns ~xs->head~.
- List(T) tail(List(T) xs) ::
     Returns the tail list of the list ~xs~.\\
     i.e. returns ~xs->tail~.
- bool null(List(T) xs) ::
     Returns ~true~ if the list ~xs~ was ~NULL~, ~false~ otherwise.\\
     i.e. returns ~!xs~.

*** Show(T) - trait to represent a value as a string

*NOTE* Not implemented yet.

- Show(T)          ::
     Type of a trait that provides a set of functions to represent a value of
     ~T~ type as a ~String~.

- trait(Show(T))   :: 
     Constructs a new trait of ~Show(T)~ type.\\
     For example, ~trait(Show(int))~ creates an object of ~Show(int)~ type.

An ~Show(T)~ trait provides the following member functions :
- String show(T a) :: Returns a ~String~ representation of ~a~.
