// -*- coding: utf-8-unix -*-

// -----------------------------------------------------------------------
// `enum` can be implemented by using just lambda expression.

// data Suits = Spades | Diamonds | Hearts | Clubs ;
type Suits = Spades | Diamonds | Hearts | Clubs ;

// data CardNumber = Ace | Two | ... | King ;
type CardNumber = Ace | Two | Three | Four | Five | Six | Seven | Eight |
                  Nine | Ten | Jack | Queen | King ;

// data Card = Card { suitOf :: Suits, numberOf :: CardNumber } ;
type Card Suits CardNumber = Card s n;
let suitOf   = |c| match c { Card s _ => s };
let numberOf = |c| match c { Card _ n => n };

let (==) = |ca cb| {
  (suitOf ca) == (suitOf cb) && (numberOf ca) == (numberOf cb)
};

print (suitOf (Card Spades Ace));   // Spades
print (numberOf (Card Spades Ace)); // Ace

print (suitOf (Card Spades Ace) == Spades);    // true
print (numberOf (Card Spades Ace) == Ace);     // true
print (suitOf (Card Spades King) == Diamonds); // false
print (numberOf (Card Spades King) == Ace);    // false

print ((==) (Card Hearts Queen) (Card Hearts Queen)); // true
print ((==) (Card Hearts King) (Card Hearts Queen));  // false
print ((==) (Card Spades Queen) (Card Hearts Queen)); // false
