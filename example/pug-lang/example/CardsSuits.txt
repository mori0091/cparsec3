// -*- coding: utf-8-unix -*-

// -----------------------------------------------------------------------
// `enum` can be implemented by using just lambda expression.

// data Suits = Spades | Diamonds | Hearts | Clubs ;
let Spades   = |_| Spades;
let Diamonds = |_| Diamonds;
let Hearts   = |_| Hearts;
let Clubs    = |_| Clubs;

// data CardNumber = Ace | Two | ... | King ;
let Ace   = |_| Ace;
let Two   = |_| Two;
let Three = |_| Three;
let Four  = |_| Four;
let Five  = |_| Five;
let Six   = |_| Six;
let Seven = |_| Seven;
let Eight = |_| Eight;
let Nine  = |_| Nine;
let Ten   = |_| Ten;
let Jack  = |_| Jack;
let Queen = |_| Queen;
let King  = |_| King;

// data Card = Card { suitOf :: Suits, numberOf :: CardNumber } ;
let Card     = |suit number| |f| f suit number;
let suitOf   = |c| c (|s _| s);
let numberOf = |c| c (|_ n| n);

let (==) = |ca cb| {
  (suitOf ca) == (suitOf cb) && (numberOf ca) == (numberOf cb)
};

print (suitOf (Card Spades Ace));   // Spades
print (numberOf (Card Spades Ace)); // Ace

print (suitOf (Card Spades Ace) == Spades);    // true
print (numberOf (Card Spades Ace) == Ace);     // true
print (suitOf (Card Spades King) == Diamonds); // false
print (numberOf (Card Spades King) == Ace);    // false

print ((==) (Card Hearts Queen) (Card Hearts Queen)); // true
print ((==) (Card Hearts King) (Card Hearts Queen));  // false
print ((==) (Card Spades Queen) (Card Hearts Queen)); // false
