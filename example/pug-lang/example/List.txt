// -*- coding: utf-8-unix -*-

// -----------------------------------------------------------------------
// List a - list type as an algebraic data type

type List a = Cons a (List a) | Nil;
let head = |xs| match xs { Cons x xs => x };
let tail = |xs| match xs { Cons x xs => xs };
let null = |xs| match xs { Nil => true; _ => false };

let xs = Cons 1 (Cons 2 (Cons 3 Nil));

print (null xs);                // false
print (null Nil);               // true

print (head xs);                // 1
print (head (tail xs));         // 2
print (head (tail (tail xs)));  // 3
print (tail (tail (tail xs)));  // Nil

print (null xs);                // false
print (null Nil);               // true


// -----------------------------------------------------------------------
// folding functions

let foldr = |f a xs|
  if null xs {
    a
  } else {
    // force strict evaluation of `a` for avoiding stack overflow
    a;
    f (head xs) (foldr f a (tail xs))
  }
;

let foldl = |f a xs|
  if null xs {
    a
  } else {
    // force strict evaluation of `a` for avoiding stack overflow
    a;
    foldl f (f a (head xs)) (tail xs)
  }
;

let (*) = |a b| a * b;
let (+) = |a b| a + b;
let sub = |a b| a - b;

print (foldr (*) 1 xs);         // 6  (1 * (2 * (3 * 1)))
print (foldl (*) 1 xs);         // 6  (((1 * 1) * 2) * 3)
print (foldr (+) 0 xs);         // 6  (1 + (2 + (3 + 0)))
print (foldl (+) 0 xs);         // 6  (((0 + 1) + 2) + 3)
print (foldr sub 0 xs);         // 2  (1 - (2 - (3 - 0)))
print (foldl sub 0 xs);         // -6 (((0 - 1) - 2) - 3)

// -----------------------------------------------------------------------

// take leading `n` elements from list
let take = |n xs|
  if n <= 0 {
    Nil
  } else {
    Cons (head xs) (take (n-1) (tail xs))
  }
;

// drop leading `n` elements from list
let drop = |n xs|
  if n <= 0 {
    xs
  } else {
    drop (n-1) (tail xs)
  }
;

// functions that constructs an infinite list.
let repeat   = |x| Cons x (repeat x);
let sequence = |x| Cons x (sequence (x+1));

print (foldl (+) 0 (take 1000 (repeat 1)));   // 1000
print (foldl (+) 0 (take 1000 (sequence 1))); // 500500

let zipWith = |f xs ys|
  if (null xs) || (null ys) {
    Nil
  } else {
    Cons (f (head xs) (head ys)) (zipWith f (tail xs) (tail ys))
  }
;

// sequence of fibonacci numbers
var fib : List a;
let fib = Cons 0 (Cons 1 (zipWith (+) fib (tail fib)));
// NOTE: In this case,`var` declaration (type-annotation) is needed.

// print each element of list
let printList = |xs|
  if null xs {
    ()
  } else {
    print (head xs);
    printList (tail xs);
  }
;

// print sequence of fibonacci numbers
printList (take 10 fib);

// print 20th fibonacci number
print (head (drop 19 fib));

// sum xs = foldl (+) 0 xs
let sum = foldl (+) 0;
print (sum (take 1000 (repeat 1)));   // 1000
print (sum (take 1000 (sequence 1))); // 500500

// product xs = foldl (*) 1 xs
let product = foldl (*) 1;
print (product (take 10 (repeat 2)));   // 2^10
print (product (take 10 (sequence 1))); // 10!
