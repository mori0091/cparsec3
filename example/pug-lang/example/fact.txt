// -*- coding: utf-8-unix -*-

// Here are three implementations of `factorial` function.
//
// NOTE: The argument `x` should be `x <= 20`,
//       otherwise calculation overflows.
//       (21! is too large for 64bit integer)

// factorial
let fact1 = |x|
  if x <=1 {
    1
  } else {
    x * fact1 (x-1)
  }
;

// factorial (tail recursive call version)
let fact2 = |x| {
  let f = |x a| {
    if x <= 1 {
      a
    } else {
      a;                        // force strict evaluation
      f (x-1) (x*a)
    }
  };
  f x 1
};

// NOTE: In the above inner function `f` of `fact2`,
//       force strict evaluation of `a` shall be done
//       before recursive call of `f`.

let fact = fact2;
